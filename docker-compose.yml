version: '3'
services:

  # the first application
  app1:
    image: golang:latest
    working_dir: /go/src/app1
    command: go run main.go
    depends_on:
      - consul
      - registrator
    dns: 10.0.0.4
    dns_search: service.consul
    volumes:
      - .:/go/src
    networks:
     - intnetwork
    ports:
      - '8080'
    expose:
      - '8080'
    labels:
      - "SERVICE_8080_NAME=app1"

  # the second application
  app2:
    image: golang:latest
    working_dir: /go/src/app2
    command: go run main.go
    depends_on:
      - consul
      - registrator
    dns: 10.0.0.4
    dns_search: service.consul
    volumes:
      - .:/go/src
    networks:
     - intnetwork
    ports:
      - '8080'
    expose:
      - '8080'
    labels:
      - "SERVICE_8080_NAME=app1"

  # the second application
  test:
    image: golang:latest
    working_dir: /go/src/test
    command: go run main.go
    depends_on:
      - consul
      - registrator
      - app1
      - app2
    dns: 10.0.0.4
    dns_search: service.consul
    volumes:
      - .:/go/src
    networks:
     - intnetwork

  # consul server instance
  consul:
    image: progrium/consul
    command: -advertise 10.0.0.4 -server -ui-dir ui/ -bootstrap
    networks:
      - intnetwork
    ports:
      - "8300:8300"
      - "8301:8301"
      - "8301:8301/udp"
      - "8302:8302"
      - "8302:8302/udp"
      - "8400:8400"
      - "8500:8500"
      - "53:53/udp"
    labels:
      - "SERVICE_8500_NAME=consul"
      - "SERVICE_8300_IGNORE=yes"
      - "SERVICE_8301_IGNORE=yes"
      - "SERVICE_8302_IGNORE=yes"
      - "SERVICE_8400_IGNORE=yes"
      - "SERVICE_53_IGNORE=yes"

  # consul server instance
  registrator:
    image: gliderlabs/registrator
    command: -internal consul://10.0.0.4:8500
    depends_on:
      - consul
    dns: 10.0.0.4
    dns_search: service.consul
    networks:
      - intnetwork
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock

networks:
  intnetwork:
    external:
      name: docker_gwbridge